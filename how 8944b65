[33mcommit 8944b658c6d96031637150e73c921a8fe556280a[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: suryapratap26 <suryapratapsinghchundawat66@gmail.com>
Date:   Sun Oct 26 12:10:47 2025 +0530

    final commit

[1mdiff --git a/food-app-backend-js/src/routes/order.routes.js b/food-app-backend-js/src/routes/order.routes.js[m
[1mindex 3bd8e42..018c55e 100644[m
[1m--- a/food-app-backend-js/src/routes/order.routes.js[m
[1m+++ b/food-app-backend-js/src/routes/order.routes.js[m
[36m@@ -4,15 +4,12 @@[m [mimport { checkAdminRole } from '../middleware/admin.middleware.js';[m
 [m
 const router = express.Router();[m
 [m
[31m-// PUBLIC / CLIENT verification[m
 router.post('/verify', orderController.verifyPayment);[m
 [m
[31m-// All subsequent routes are protected globally[m
 router.post('/create', orderController.createOrderWithPayment);[m
 router.get('/', orderController.getUserOrder);[m
 router.delete('/:orderId', orderController.removeOrder);[m
 [m
[31m-// ADMIN ENDPOINTS[m
 router.get('/all', checkAdminRole, orderController.getOrdersOfAllUsers);[m
 router.put('/:orderId', checkAdminRole, orderController.updateOrder);[m
 [m
[1mdiff --git a/foodies/src/service/orderService.js b/foodies/src/service/orderService.js[m
[1mindex c603351..d939606 100644[m
[1m--- a/foodies/src/service/orderService.js[m
[1m+++ b/foodies/src/service/orderService.js[m
[36m@@ -1,96 +1,169 @@[m
[31m-import { apiClient, getUserRole } from "./apiClient";[m
[31m-[m
[31m-const handleError = (error) => {[m
[31m-  const message =[m
[31m-    error?.response?.data?.message ||[m
[31m-    error?.response?.data?.error ||[m
[31m-    error?.message ||[m
[31m-    "Server error";[m
[31m-  const err = new Error(message);[m
[31m-  err.origin = error;[m
[31m-  throw err;[m
[31m-};[m
[31m-[m
[31m-export const createOrder = async (orderData) => {[m
[31m-  try {[m
[31m-    const response = await apiClient.post("/api/orders/create", orderData);[m
[31m-    return response.data;[m
[31m-  } catch (error) {[m
[31m-    console.error("createOrder error:", error);[m
[31m-    handleError(error);[m
[32m+[m[32mimport Order from '../models/Order.js';[m
[32m+[m[32mimport Cart from '../models/Cart.js';[m
[32m+[m[32mimport Stripe from 'stripe';[m
[32m+[m
[32m+[m[32m// Initialize Stripe outside the class for performance[m
[32m+[m[32mconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);[m
[32m+[m
[32m+[m[32mconst VALID_ORDER_STATUSES = [[m
[32m+[m[32m  'PLACED',[m
[32m+[m[32m  'PROCESSING',[m
[32m+[m[32m  'PREPARING',[m
[32m+[m[32m  'DELIVERED',[m
[32m+[m[32m  'CANCELLED',[m
[32m+[m[32m];[m
[32m+[m
[32m+[m[32mclass OrderService {[m
[32m+[m[32m  // --- Helper Methods ---[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Converts a client request object into a new Mongoose Order entity.[m
[32m+[m[32m   */[m
[32m+[m[32m  converToEntity(orderRequest, userId) {[m
[32m+[m[32m    return new Order({[m
[32m+[m[32m      userId,[m
[32m+[m[32m      userAddress: orderRequest.userAddress,[m
[32m+[m[32m      amount: orderRequest.amount,[m
[32m+[m[32m      orderItemsList: orderRequest.orderItems,[m
[32m+[m[32m      phoneNumber: orderRequest.phoneNumber,[m
[32m+[m[32m      email: orderRequest.email,[m
[32m+[m[32m      paymentStatus: 'PENDING_INTENT_CREATION',[m
[32m+[m[32m      orderStatus: 'INITIATED',[m
[32m+[m[32m    });[m
   }[m
[31m-};[m
[31m-[m
[31m-export const verifyPayment = async (verificationData) => {[m
[31m-  try {[m
[31m-    const response = await apiClient.post("/api/orders/verify", verificationData);[m
[31m-    return response.data;[m
[31m-  } catch (error) {[m
[31m-    console.error("verifyPayment error:", error);[m
[31m-    handleError(error);[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Converts a Mongoose Order entity into a standardized response object for the client.[m
[32m+[m[32m   * FIX: Changed 'OrderedItems' to 'orderedItems' to match frontend consumption.[m
[32m+[m[32m   */[m
[32m+[m[32m  convertToResponse(order) {[m
[32m+[m[32m    // Basic null check for the input object[m
[32m+[m[32m    if (!order) return null;[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      id: order._id?.toString(),[m
[32m+[m[32m      userId: order.userId,[m
[32m+[m[32m      userAddress: order.userAddress,[m
[32m+[m[32m      phoneNumber: order.phoneNumber,[m
[32m+[m[32m      email: order.email,[m
[32m+[m[32m      amount: order.amount,[m
[32m+[m[32m      paymentStatus: order.paymentStatus,[m
[32m+[m[32m      orderStatus: order.orderStatus,[m
[32m+[m[32m      // FIX: Standardized to camelCase[m
[32m+[m[32m      orderedItems: order.orderItemsList || [],[m
[32m+[m[32m      stripePaymentIntentId: order.stripePaymentIntentId,[m
[32m+[m[32m      stripeClientSecret: order.stripeClientSecret,[m
[32m+[m[32m    };[m
   }[m
[31m-};[m
[31m-[m
[31m-export const getUserOrders = async () => {[m
[31m-  try {[m
[31m-    const response = await apiClient.get("/api/orders");[m
[31m-    return response.data;[m
[31m-  } catch (error) {[m
[31m-    console.error("getUserOrders error:", error);[m
[31m-    handleError(error);[m
[32m+[m
[32m+[m[32m  // --- Core Methods ---[m
[32m+[m
[32m+[m[32m  async createOrderWithPayment(request, userId) {[m
[32m+[m[32m    let order = this.converToEntity(request, userId);[m
[32m+[m[32m    // Use transaction in real app, but for now, save sequentially[m
[32m+[m[32m    order = await order.save();[m
[32m+[m
[32m+[m[32m    try {[m
[32m+[m[32m      // Amount must be in the smallest currency unit (e.g., cents/paise)[m
[32m+[m[32m      const amountInSmallestUnit = Math.round(order.amount * 100);[m
[32m+[m
[32m+[m[32m      const paymentIntent = await stripe.paymentIntents.create({[m
[32m+[m[32m        amount: amountInSmallestUnit,[m
[32m+[m[32m        currency: 'inr',[m
[32m+[m[32m        metadata: { order_id: order._id.toString(), user_id: userId },[m
[32m+[m[32m      });[m
[32m+[m
[32m+[m[32m      // Update order with payment intent details[m
[32m+[m[32m      order.stripePaymentIntentId = paymentIntent.id;[m
[32m+[m[32m      order.stripeClientSecret = paymentIntent.client_secret;[m
[32m+[m[32m      order.paymentStatus = 'PENDING';[m
[32m+[m[32m      order.orderStatus = 'AWAITING_PAYMENT';[m
[32m+[m[32m    } catch (e) {[m
[32m+[m[32m      console.error('Stripe Error creating Payment Intent:', e.message);[m
[32m+[m[32m      // It's critical to delete the partially created order here if payment initiation fails[m
[32m+[m[32m      await Order.findByIdAndDelete(order._id);[m[41m [m
[32m+[m[32m      throw new Error('Failed to initiate payment with Stripe. Order aborted.');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    order = await order.save();[m
[32m+[m[32m    return this.convertToResponse(order);[m
   }[m
[31m-};[m
 [m
[31m-// âœ… Admin-only[m
[31m-export const getAllOrders = async () => {[m
[31m-  if (getUserRole() !== "ADMIN") {[m
[31m-    throw new Error("Access denied: only admins can view all orders.");[m
[32m+[m[32m  async varifyPayment(paymentData, status) {[m
[32m+[m[32m    const paymentIntentId = paymentData.stripePaymentIntentId;[m
[32m+[m[32m    if (!paymentIntentId) {[m
[32m+[m[32m      throw new Error('Missing Payment Intent ID for verification.');[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Assuming Order.findByStripePaymentIntentId exists and is efficient[m
[32m+[m[32m    const order = await Order.findByStripePaymentIntentId(paymentIntentId);[m
[32m+[m[32m    if (!order) {[m
[32m+[m[32m      throw new Error(`Order not found for Payment Intent ID: ${paymentIntentId}`);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    const lowerStatus = status.toLowerCase();[m
[32m+[m
[32m+[m[32m    if (lowerStatus === 'succeeded' || lowerStatus === 'success' || lowerStatus === 'paid') 